name: Build, Test and Deploy to Prod

# Trigger the workflow when changes are pushed to the main branch
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

        # Cache dependencies to speed up build times
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            auth-service/.cargo
            auth-service/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install Rust
        run: rustup update stable && rustup default stable

      - name: Install Protobuf
        run: sudo apt-get update && sudo apt-get install -y protobuf-compiler

      - name: Build and test auth-service code
        working-directory: ./auth-service
        run: |
          export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          export DATABASE_URL="postgres://postgres:${POSTGRES_PASSWORD}@db:5432"
          export JWT_SECRET=lads
          cargo build --verbose
          cargo test --verbose

        # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker images
        uses: docker/bake-action@v2.3.0
        with:
          push: true
          files: |
            auth-compose.yml
          set: |
            *.cache-from=type=gha
            *.cache-to=type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install sshpass
        run: sudo apt-get install sshpass

      - name: Copy auth-compose.yml to droplet
        run: sshpass -v -p '${{ secrets.DROPLET_PASSWORD }}' scp -o StrictHostKeyChecking=no auth-compose.yml root@${{ vars.DROPLET_IP }}:~

      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.DROPLET_IP }}
          username: root
          password: ${{ secrets.DROPLET_PASSWORD }}
          script: |
            cd ~
            export AUTH_SERVICE_IP=${{ vars.DROPLET_IP }}
            export JWT_SECRET=${{ secrets.JWT_SECRET }}
            export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            export DATABASE_URL="postgres://postgres:${POSTGRES_PASSWORD}@db:5432"
            export TEST_DATABASE_URL="sqlite://data/database.sqlite"
            docker compose -f auth-compose.yml -f app-compose.yml -f compose.yml -f compose.override.yml down
            docker compose -f auth-compose.yml -f app-compose.yml -f compose.yml -f compose.override.yml up -d --pull always
